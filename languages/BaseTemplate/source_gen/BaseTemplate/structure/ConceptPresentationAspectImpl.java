package BaseTemplate.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Indentable;
  private ConceptPresentation props_Template;
  private ConceptPresentation props_TemplateCase;
  private ConceptPresentation props_TemplateCommentStatement;
  private ConceptPresentation props_TemplateExpressionWord;
  private ConceptPresentation props_TemplateForStatement;
  private ConceptPresentation props_TemplateIfStatement;
  private ConceptPresentation props_TemplateMethod;
  private ConceptPresentation props_TemplateMethod2;
  private ConceptPresentation props_TemplateMethod2Template;
  private ConceptPresentation props_TemplateSeparators;
  private ConceptPresentation props_TemplateStatement;
  private ConceptPresentation props_TemplateStatementList;
  private ConceptPresentation props_TemplateStringWord;
  private ConceptPresentation props_TemplateSwitchStatement;
  private ConceptPresentation props_TemplateTabWord;
  private ConceptPresentation props_TemplateTextStatement;
  private ConceptPresentation props_TemplateWord;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Indentable:
        if (props_Indentable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Indentable = cpb.create();
        }
        return props_Indentable;
      case LanguageConceptSwitch.Template:
        if (props_Template == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("template");
          props_Template = cpb.create();
        }
        return props_Template;
      case LanguageConceptSwitch.TemplateCase:
        if (props_TemplateCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TemplateCase");
          props_TemplateCase = cpb.create();
        }
        return props_TemplateCase;
      case LanguageConceptSwitch.TemplateCommentStatement:
        if (props_TemplateCommentStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_TemplateCommentStatement = cpb.create();
        }
        return props_TemplateCommentStatement;
      case LanguageConceptSwitch.TemplateExpressionWord:
        if (props_TemplateExpressionWord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<");
          props_TemplateExpressionWord = cpb.create();
        }
        return props_TemplateExpressionWord;
      case LanguageConceptSwitch.TemplateForStatement:
        if (props_TemplateForStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("for");
          props_TemplateForStatement = cpb.create();
        }
        return props_TemplateForStatement;
      case LanguageConceptSwitch.TemplateIfStatement:
        if (props_TemplateIfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_TemplateIfStatement = cpb.create();
        }
        return props_TemplateIfStatement;
      case LanguageConceptSwitch.TemplateMethod:
        if (props_TemplateMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TemplateMethod = cpb.create();
        }
        return props_TemplateMethod;
      case LanguageConceptSwitch.TemplateMethod2:
        if (props_TemplateMethod2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TemplateMethod2 = cpb.create();
        }
        return props_TemplateMethod2;
      case LanguageConceptSwitch.TemplateMethod2Template:
        if (props_TemplateMethod2Template == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TemplateMethod2Template");
          props_TemplateMethod2Template = cpb.create();
        }
        return props_TemplateMethod2Template;
      case LanguageConceptSwitch.TemplateSeparators:
        if (props_TemplateSeparators == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TemplateSeparators = cpb.create();
        }
        return props_TemplateSeparators;
      case LanguageConceptSwitch.TemplateStatement:
        if (props_TemplateStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TemplateStatement");
          props_TemplateStatement = cpb.create();
        }
        return props_TemplateStatement;
      case LanguageConceptSwitch.TemplateStatementList:
        if (props_TemplateStatementList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TemplateStatementList");
          props_TemplateStatementList = cpb.create();
        }
        return props_TemplateStatementList;
      case LanguageConceptSwitch.TemplateStringWord:
        if (props_TemplateStringWord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"");
          props_TemplateStringWord = cpb.create();
        }
        return props_TemplateStringWord;
      case LanguageConceptSwitch.TemplateSwitchStatement:
        if (props_TemplateSwitchStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("switch");
          props_TemplateSwitchStatement = cpb.create();
        }
        return props_TemplateSwitchStatement;
      case LanguageConceptSwitch.TemplateTabWord:
        if (props_TemplateTabWord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\\t");
          props_TemplateTabWord = cpb.create();
        }
        return props_TemplateTabWord;
      case LanguageConceptSwitch.TemplateTextStatement:
        if (props_TemplateTextStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"");
          props_TemplateTextStatement = cpb.create();
        }
        return props_TemplateTextStatement;
      case LanguageConceptSwitch.TemplateWord:
        if (props_TemplateWord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TemplateWord = cpb.create();
        }
        return props_TemplateWord;
    }
    return null;
  }
}
