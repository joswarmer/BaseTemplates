package BaseTemplate.behavior;

/*Generated by MPS */

import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.DequeSequence;
import java.util.LinkedList;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;

/**
 * Keeps result of templates in a list of strings / string builders.
 * This makes it easier to post-process the template result, like e.g. adding indentation.
 */
public class TemplateResult {
  public Deque<String> indents = DequeSequence.fromDequeNew(new LinkedList<String>());


  private List<TemplateResultLine> lines = ListSequence.fromList(new ArrayList<TemplateResultLine>());
  private TemplateResultLine currentLine = null;

  public TemplateResult() {
  }
  public void append(String text) {
    String[] lines = text.split("\n");
    boolean first = true;
    for (String line : lines) {
      if (first) {
        first = !(first);
      } else {
        this.appendNewline();
      }
      this.internalAdd(line);
    }
  }

  public void internalAdd(String s) {
    initNextLine();
    currentLine.append(s);
  }

  public void appendNewline() {
    if (currentLine != null) {
      currentLine.appendNewline();
      currentLine = null;
    }
  }

  public void append(TemplateResult other) {
  }

  public void appendSeparator(String sep) {
  }

  private void initNextLine() {
    if (currentLine == null) {
      currentLine = new TemplateResultLine();
      DequeSequence.fromDequeNew(indents).visitAll(new IVisitor<String>() {
        public void visit(String it) {
          currentLine.append(it);
        }
      });
      ListSequence.fromList(lines).addElement(currentLine);
    }
  }

  @Override
  public String toString() {
    StringBuilder result = new StringBuilder();
    for (TemplateResultLine line : lines) {
      result.append(line.toString());
    }
    return result.toString();
  }

  public static void main(String[] args) {
    String een = "appel\n";
    String twee = "peer\n";
    String drie = een + twee;
    System.out.println("[" + drie + "]");
    String[] lines = drie.split("\n");
    System.out.println("lines: " + lines.length);
    System.out.println("lines[0] [" + lines[0] + "]");
    System.out.println("lines[1] [" + lines[1] + "]");
  }

}
