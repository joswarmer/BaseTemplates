package BaseTemplate.behavior;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.awt.datatransfer.Transferable;
import com.intellij.ide.CopyPasteManagerEx;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

/**
 * This class was copied and changed from the plaintextgen MPS plugin
 */
public class PlaintextPaster {
  private static final Logger LOG = LogManager.getLogger(PlaintextPaster.class);
  public static String getStringFromClipboard() {
    Transferable contents = null;

    for (Transferable trf : CopyPasteManagerEx.getInstanceEx().getAllContents()) {
      if (trf != null && trf.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        contents = trf;
      }
      break;
    }
    if (contents == null) {
      return null;
    }
    if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
      try {
        Object data = contents.getTransferData(DataFlavor.stringFlavor);
        if (data instanceof String) {
          return (String) data;
        }
      } catch (UnsupportedFlavorException ex) {
        return null;
      } catch (IOException ex) {
        LoggingRuntime.logMsgView(Level.ERROR, "Pasting from clipboard went wrong!", PlaintextPaster.class, ex, null);
      }
    }
    return null;
  }

  public static void pastePlainText(SNode node) {
    String text = getStringFromClipboard();
    SNode current = node;
    if ((text != null && text.length() > 0)) {
      for (String line : text.split("\\r?\\n")) {
        String l = line.replaceAll("\t", "    ");
        if ((l != null && l.length() > 0)) {
          SNode lineNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb36L, "BaseTemplate.structure.TemplateTextStatement"));
          SNode word = SLinkOperations.addNewChild(lineNode, MetaAdapterFactory.getContainmentLink(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb36L, 0x6abb90ebe165cb79L, "words"), MetaAdapterFactory.getConcept(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb3fL, "BaseTemplate.structure.TemplateStringWord"));
          SPropertyOperations.assign(word, MetaAdapterFactory.getProperty(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb3fL, 0x6abb90ebe165cb42L, "text"), l);
          current = SNodeOperations.insertNextSiblingChild(current, lineNode);
        } else {
          SNode stat = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe16d23baL, "BaseTemplate.structure.TemplateStatement"));
          current = SNodeOperations.insertNextSiblingChild(current, stat);
        }
      }
    }
  }

}
