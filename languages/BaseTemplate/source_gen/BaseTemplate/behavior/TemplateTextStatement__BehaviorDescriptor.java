package BaseTemplate.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class TemplateTextStatement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb36L, "BaseTemplate.structure.TemplateTextStatement");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> end_id7mU70b2rtRY = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("end").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7mU70b2rtRY").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(end_id7mU70b2rtRY);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String end_id7mU70b2rtRY(@NotNull SNode __thisNode__) {
    SNode forst = SNodeOperations.getNodeAncestor(__thisNode__, MetaAdapterFactory.getConcept(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe1739e4dL, "BaseTemplate.structure.TemplateForStatement"), false, false);
    if ((forst == null)) {
      return TemplateSeparators__BehaviorDescriptor.end_id7mU70b2rtRY.invoke0(__thisNode__, MetaAdapterFactory.getConcept(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe16d23baL, "BaseTemplate.structure.TemplateStatement"));
    } else {
      return "<TEXT-FOR>" + TemplateSeparators__BehaviorDescriptor.end_id7mU70b2rtRY.invoke(forst);
    }
  }

  /*package*/ TemplateTextStatement__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) end_id7mU70b2rtRY(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
