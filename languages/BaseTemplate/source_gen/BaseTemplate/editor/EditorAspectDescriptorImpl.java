package BaseTemplate.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("Template", "", true, "BaseTemplate.editor.template.Template"), new ConceptEditorHintImpl("MPS", "", true, "BaseTemplate.editor.template.MPS"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new LocalVariableDeclaration_Template_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Template_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new TemplateCase_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new TemplateCommentStatement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new TemplateExpressionWord_Editor());
      case 5:
        return Arrays.asList(new ConceptEditor[]{new TemplateForStatement_Editor(), new TemplateForStatement_MPS_Editor()});
      case 6:
        return Collections.<ConceptEditor>singletonList(new TemplateIfStatement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new TemplateMethod_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new TemplateMethod2_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new TemplateMethod2Template_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new TemplateStatement_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new TemplateStatementList_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new TemplateStringWord_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new TemplateSwitchStatement_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new TemplateTabWord_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new TemplateTextStatement_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.BaseMethodDeclaration_BodyComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new TemplateMethodDeclaration_BodyComponent());
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }
  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new TemplateStatement_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x460a1d573d757a8cL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x1dac2151645ee30L), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x498a3fe4d5f876f6L), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb3aL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe1739e4dL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe16d23bbL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x1dac215163039d1L), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x11cb36a604ccf52eL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x11cb36a604cd10f2L), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe16d23baL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe16ed3b9L), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb3fL), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x1dac215164dfe99L), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x208c44dd6b151389L), MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe165cb36L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x1dac215163039d1L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xdb391f02128c4f99L, 0x939ab50794314dffL, 0x6abb90ebe16d23baL)).seal();
}
