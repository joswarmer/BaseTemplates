package BaseTemplate.sandbox;

/*Generated by MPS */

import BaseTemplate.behavior.TemplateResult;
import java.util.List;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.DequeSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TemplateExample {

  public String templateName2() {
    String templateName2 = "";
    {
      TemplateResult result = new TemplateResult();
      result.append("aaaa");
      result.append("" + 12);
      result.append("is");
      result.append("" + 23);
      result.appendNewline();
      templateName2 = result.toString();
    }
    return templateName2;
  }


  public static void main(String[] args) {
    List<String> names = new ArrayList<String>();
    names.add("aap");
    names.add("__noot");
    names.add("mies");
    names.add("aap");
    BaseTemplateGenerator generator = new BaseTemplateGenerator();
    String result = templateFunction(names);
    System.out.print(result);
    System.out.println("Done");
  }

  public static String templateFunction(List<String> names) {
    String world = "World";
    SNode literal = null;

    String template1 = "";
    {
      TemplateResult result = new TemplateResult();
      result.appendNewline();
      result.append("public void printSomething() {");
      result.appendNewline();
      result.appendNewline();
      DequeSequence.fromDequeNew(result.indents).pushElement("        ");
      result.append("" + templateName());
      result.appendNewline();
      DequeSequence.fromDequeNew(result.indents).popElement();
      result.append("" + "WARNING: EMPTY EXPRESSION IN TEMPLATE");
      result.appendNewline();
      result.append("    // Hello ");
      result.append("" + world + 12);
      result.appendNewline();
      {
        DequeSequence.fromDequeNew(result.indents).pushElement("    ");
        boolean firstInLoop_4xg1bs_g0d0f = true;
        for (String name : names) {
          if (firstInLoop_4xg1bs_g0d0f) {
            firstInLoop_4xg1bs_g0d0f = false;
          }
          result.append("System.out.println(\"");
          result.append("" + name + name);
          result.append("\");");
          result.appendNewline();
          DequeSequence.fromDequeNew(result.indents).pushElement("    ");
          if (name.startsWith("a")) {
            result.append("// twaalf");
            result.appendNewline();
            result.appendNewline();
          } else {
            result.append("// No Twelve");
            result.appendNewline();
          }
          DequeSequence.fromDequeNew(result.indents).popElement();
        }
        DequeSequence.fromDequeNew(result.indents).popElement();
      }
      {
        SAbstractConcept cncpt = SNodeOperations.getConcept(literal);
        boolean noneMatched = true;
        if (noneMatched && SConceptOperations.isSubConceptOf(cncpt, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "jetbrains.mps.baseLanguage.structure.StringLiteral"))) {
          noneMatched = false;
          result.append("" + 12);
          result.appendNewline();
        }
        if (noneMatched) {
          result.appendNewline();
        }
      }
      result.append("}");
      result.appendNewline();
      result.appendNewline();
      template1 = result.toString();
    }

    return template1;
  }

  public static String templateName() {
    String templateName = "";
    {
      TemplateResult result = new TemplateResult();
      result.append("Regel 1");
      result.appendNewline();
      result.append("  Regel 2");
      result.appendNewline();
      result.append("Regel 3");
      result.appendNewline();
      templateName = result.toString();
    }
    return templateName;
  }
}
